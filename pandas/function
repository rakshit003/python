************Reading data as date from external file************************

Automatic
It should be noted that Pandas integrates powerful date parsers such that many different kinds of dates can be parsed automatically. 
Thus, you usually just need to set the parse_date parameter.

df = pd.read_csv("dates_text.csv", parse_dates=["date"])

if date values are spread across multiple columns then read like this

**data**
y,m,d,category,balance
2022,01,01,A,100
2022,02,02,B,200
2022,03,12,C,300

df_cols = pd.read_csv("dates_text_cols.csv", parse_dates={"date": ["y", "m", "d"]})

**customized date parser

pd.read_csv("custom_dt_fmt.csv", parse_dates=["date"], date_parser=lambda x: datetime.strptime(x, "%b_%d_%Y"))
The tricky thing here is to define the proper date format in the strptime method.

****************processing dates in pandas*********

>>> pd.to_datetime("Jan 01, 2022") #to_datetime function converts any date string to pandas datetime object
Timestamp('2022-01-01 00:00:00')
>>> pd.to_datetime(["01/01/2022", "01/02/2022", "01/03/2022"])
DatetimeIndex(['2022-01-01', '2022-01-02', '2022-01-03'], dtype='datetime64[ns]', freq=None)
>>> pd.to_datetime(pd.Series(["01/01/2022", "01/02/2022", "01/03/2022"]))

**creating date range in pandas

pd.date_range(start="12/01/2022", end="12/07/2022")
DatetimeIndex(['2022-12-01', '2022-12-02', '2022-12-03', '2022-12-04',
               '2022-12-05', '2022-12-06', '2022-12-07'],

**sepeating date from time using dt class
>>> df["date"] = df["timestamp"].dt.date
>>> df["time"] = df["timestamp"].dt.time

or dt.month, dt.year, dt.weekday -- all are possible


**************iterating over dataframes**************
for index, row in df.iterrows():
  print(row["firstname"])
  
**********indexing*******************
iloc is conceptually simpler than loc because it ignores the dataset's indices. 
When we use iloc we treat the dataset like a big matrix (a list of lists), one that we have to index into by position. 
loc, by contrast, uses the information in the indices to do its work. 


***Filtering

reviews.loc[(reviews.country == 'Italy') & (reviews.points >= 90)]

Filtering multiple values
#if you have a lot of values to filter on a column the use isin

reviews.loc[reviews.country.isin(['Italy', 'France'])]
reviews.loc[reviews.price.notnull()]
reviews.loc[reviews.price.isnull()]

****Assigning values

reviews['critic'] = 'everyone' #constant value
reviews['index_backwards'] = range(len(reviews), 0, -1) #range

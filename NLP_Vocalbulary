Vocabulary: It is fixed set of unique words supported by language models
eg: A chatbot can answer only a fixed set of words, these set of words are called closed vocabulary
Open Vocabulary: encounter of words out of vocabuary(OOV). All these words can be replaced with 'UNK'.
eg: if a vocabulary is defined of all the words in the corpurs with 2 or more ocuurances then all single freq words will be replaced by 'UNK' along with other OOV words.

Criteria to create Vocabulary
1. Include words with > threshold frequency
2. Define Max words in vocab(vocab size) and sort them based of max frequenct
-Use <UNK> sparingly (Why?)
-Perplexity -  only compare LMs with the same V

/** 
with open("WSJ_02-21.pos", 'r') as f:
    lines = f.readlines()
    
import string
from collections import defaultdict

#Create a vocabulary from given words
# A vocabulary is made up of every word that appeared at least 2 times in the dataset. For this, follow these steps:
#Get only the words from the dataset
#Use a defaultdict to count the number of times each word appears
#Filter the dict to only include words that appeared at least 2 times
#Create a list out of the filtered dict
#Sort the list

# Define defaultdict of type 'int'
freq = defaultdict(int)

for word in words:
    freq[word] += 1
    
# Create the vocabulary by filtering the 'freq' dictionary
vocab = [k for k, v in freq.items() if (v > 1 and k != '\n')]

#Dealing with unknown words
A new text will have words that do not appear in the current vocabulary. 
To tackle this, you can simply classify each new word as an unknown one, 
but you can do better by creating a function that tries to classify the 
type of each unknown word and assign it a corresponding unknown token.

def assign_unk(word):
    """
    Assign tokens to unknown words
    """
    
    # Punctuation characters
    # Try printing them out in a new cell!
    punct = set(string.punctuation)
    
    # Suffixes
    noun_suffix = ["action", "age", "ance", "cy", "dom", "ee", "ence", "er", "hood", "ion", "ism", "ist", "ity", "ling", "ment", "ness", "or", "ry", "scape", "ship", "ty"]
    verb_suffix = ["ate", "ify", "ise", "ize"]
    adj_suffix = ["able", "ese", "ful", "i", "ian", "ible", "ic", "ish", "ive", "less", "ly", "ous"]
    adv_suffix = ["ward", "wards", "wise"]

    # Loop the characters in the word, check if any is a digit
    if any(char.isdigit() for char in word):
        return "--unk_digit--"

    # Loop the characters in the word, check if any is a punctuation character
    elif any(char in punct for char in word):
        return "--unk_punct--"

    # Loop the characters in the word, check if any is an upper case character
    elif any(char.isupper() for char in word):
            return "--unk_upper--"

    # Check if word ends with any noun suffix
    elif any(word.endswith(suffix) for suffix in noun_suffix):
        return "--unk_noun--"

    # Check if word ends with any verb suffix
    elif any(word.endswith(suffix) for suffix in verb_suffix):
        return "--unk_verb--"

    # Check if word ends with any adjective suffix
    elif any(word.endswith(suffix) for suffix in adj_suffix):
        return "--unk_adj--"

    # Check if word ends with any adverb suffix
    elif any(word.endswith(suffix) for suffix in adv_suffix):
        return "--unk_adv--"
    
    # If none of the previous criteria is met, return plain unknown
    return "--unk--"



    ###############Getting the correct tag for a word
    
    def get_word_tag(line, vocab):
    # If line is empty return placeholders for word and tag
    if not line.split():
        word = "--n--"
        tag = "--s--"
    else:
        # Split line to separate word and tag
        word, tag = line.split()
        # Check if word is not in vocabulary
        if word not in vocab: 
            # Handle unknown word
            word = assign_unk(word)
    return word, tag
    
    

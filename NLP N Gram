def sentence_to_trigram(tokenized_sentence):
    """
    Prints all trigrams in the given tokenized sentence.
    
    Args:
        tokenized_sentence: The words list.
    
    Returns:
        No output
    """
    # note that the last position of i is 3rd to the end
    for i in range(len(tokenized_sentence) - 3 + 1):
        # the sliding window starts at position i and contains 3 words
        trigram = tokenized_sentence[i : i + 3]
        print(trigram)

tokenized_sentence = ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']

print(f'List all trigrams of sentence: {tokenized_sentence}\n')
sentence_to_trigram(tokenized_sentence)

# when working with trigrams, you need to prepend 2 <s> and append one </s>
n = 3
tokenized_sentence = ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']
tokenized_sentence = ["<s>"] * (n - 1) + tokenized_sentence + ["</s>"]
print(tokenized_sentence)

##### NLP Language Models ####
Steps:

-Count matrix
-Probability matrix
-Language model
-Log probability to avoid underflow
-Generative language model


    - in Count Matrix rows correspond to first word on bi Gram, column corresponds to 2nd word on bi gram
    -Sum of a row is all words that starts with a given start of bigram, so if we divide each cell of a row by its rowsum we get the bigram probability
    - to get proabability of a sentense multiply all the probability using prob matrix of each bigram
    
     eg: <s> I Like Cat </s>

     probability of above sentense using bi gram= P(I/<s>)*P(Like/I)*P(Cat/like)*P(</s>/Cat)
     
 ###Code
 
 1. To calculate the n-gram probability, you will need to count frequencies of n-grams and n-gram prefixes in the training dataset. 
    and store the n-gram frequencies in a dictionary.
 2. count matrix that keeps counts of (n-1)-gram prefix followed by all possible last words in the vocabulary.
 
 
    # manipulate n_gram count dictionary

    n_gram_counts = {
        ('i', 'am', 'happy'): 2,
        ('am', 'happy', 'because'): 1}

    # get count for an n-gram tuple
    print(f"count of n-gram {('i', 'am', 'happy')}: {n_gram_counts[('i', 'am', 'happy')]}")

    # check if n-gram is present in the dictionary
    if ('i', 'am', 'learning') in n_gram_counts:
        print(f"n-gram {('i', 'am', 'learning')} found")
    else:
        print(f"n-gram {('i', 'am', 'learning')} missing")

    # update the count in the word count dictionary
    The next code snippet shows how to merge two tuples in Python. That will be handy when creating the n-gram from the prefix and the last word
    
    # concatenate tuple for prefix and tuple with the last word to create the n_gram
    # concatenate tuple for prefix and tuple with the last word to create the n_gram
    prefix = ('i', 'am', 'happy')
    word = 'because'

    # note here the syntax for creating a tuple for a single word
    n_gram = prefix + (word,)
    print(n_gram)


#### creating Trigram matrcis
import numpy as np
import pandas as pd
from collections import defaultdict
def single_pass_trigram_count_matrix(corpus):
    """
    Creates the trigram count matrix from the input corpus in a single pass through the corpus.
    
    Args:
        corpus: Pre-processed and tokenized corpus. 
    
    Returns:
        bigrams: list of all bigram prefixes, row index
        vocabulary: list of all found words, the column index
        count_matrix: pandas dataframe with bigram prefixes as rows, 
                      vocabulary words as columns 
                      and the counts of the bigram/word combinations (i.e. trigrams) as values
    """
    bigrams = []
    vocabulary = []
    count_matrix_dict = defaultdict(dict)
    
    # go through the corpus once with a sliding window
    for i in range(len(corpus) - 3 + 1):
        # the sliding window starts at position i and contains 3 words
        trigram = tuple(corpus[i : i + 3])
        
        bigram = trigram[0 : -1]
        if not bigram in bigrams:
            bigrams.append(bigram)        
        
        last_word = trigram[-1]
        if not last_word in vocabulary:
            vocabulary.append(last_word)
        
        if (bigram,last_word) not in count_matrix_dict:
            count_matrix_dict[bigram,last_word] = 0
            
        count_matrix_dict[bigram,last_word] += 1
    
    # convert the count_matrix to np.array to fill in the blanks
    count_matrix = np.zeros((len(bigrams), len(vocabulary)))
    for trigram_key, trigam_count in count_matrix_dict.items():
        count_matrix[bigrams.index(trigram_key[0]), \
                     vocabulary.index(trigram_key[1])]\
        = trigam_count
    
    # np.array to pandas dataframe conversion
    count_matrix = pd.DataFrame(count_matrix, index=bigrams, columns=vocabulary)
    return bigrams, vocabulary, count_matrix

    corpus = ['i', 'am', 'happy', 'because', 'i', 'am', 'learning', '.']

    bigrams, vocabulary, count_matrix = single_pass_trigram_count_matrix(corpus)

    print(count_matrix)

 
 
